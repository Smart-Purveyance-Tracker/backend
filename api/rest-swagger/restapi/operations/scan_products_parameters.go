// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewScanProductsParams creates a new ScanProductsParams object
// no default values defined in spec.
func NewScanProductsParams() ScanProductsParams {

	return ScanProductsParams{}
}

// ScanProductsParams contains all the bound params for the scan products operation
// typically these are obtained from a http.Request
//
// swagger:parameters scanProducts
type ScanProductsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The file to upload.
	  In: formData
	*/
	Image io.ReadCloser
	/*Date when scan was done
	  In: query
	*/
	ScanDate *strfmt.DateTime
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewScanProductsParams() beforehand.
func (o *ScanProductsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}

	image, imageHeader, err := r.FormFile("image")
	if err != nil && err != http.ErrMissingFile {
		res = append(res, errors.New(400, "reading file %q failed: %v", "image", err))
	} else if err == http.ErrMissingFile {
		// no-op for missing but optional file parameter
	} else if err := o.bindImage(image, imageHeader); err != nil {
		res = append(res, err)
	} else {
		o.Image = &runtime.File{Data: image, Header: imageHeader}
	}

	qScanDate, qhkScanDate, _ := qs.GetOK("scanDate")
	if err := o.bindScanDate(qScanDate, qhkScanDate, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindImage binds file parameter Image.
//
// The only supported validations on files are MinLength and MaxLength
func (o *ScanProductsParams) bindImage(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindScanDate binds and validates parameter ScanDate from query.
func (o *ScanProductsParams) bindScanDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("scanDate", "query", "strfmt.DateTime", raw)
	}
	o.ScanDate = (value.(*strfmt.DateTime))

	if err := o.validateScanDate(formats); err != nil {
		return err
	}

	return nil
}

// validateScanDate carries on validations for parameter ScanDate
func (o *ScanProductsParams) validateScanDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("scanDate", "query", "date-time", o.ScanDate.String(), formats); err != nil {
		return err
	}
	return nil
}
