// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ScanProductsHandlerFunc turns a function with the right signature into a scan products handler
type ScanProductsHandlerFunc func(ScanProductsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ScanProductsHandlerFunc) Handle(params ScanProductsParams) middleware.Responder {
	return fn(params)
}

// ScanProductsHandler interface for that can handle valid scan products params
type ScanProductsHandler interface {
	Handle(ScanProductsParams) middleware.Responder
}

// NewScanProducts creates a new http.Handler for the scan products operation
func NewScanProducts(ctx *middleware.Context, handler ScanProductsHandler) *ScanProducts {
	return &ScanProducts{Context: ctx, Handler: handler}
}

/*ScanProducts swagger:route POST /scanProducts scanProducts

Uploads a file.

*/
type ScanProducts struct {
	Context *middleware.Context
	Handler ScanProductsHandler
}

func (o *ScanProducts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewScanProductsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
